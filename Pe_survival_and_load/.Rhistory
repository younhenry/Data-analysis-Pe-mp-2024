knitr::opts_chunk$set(echo = TRUE, eval = TRUE, message = FALSE, warning = FALSE)
#[R v4.2.1]
if(require("pacman")==T){
library("pacman")
}else{
install.packages("pacman")
}
pacman::p_load(Rmisc, tidyverse, tidybayes, ggplot2, kableExtra, gridExtra, flextable, survival, survminer, performance, car, lme4, multcomp, emmeans, brms, cmdstanr, bayesplot, gganimate, gifski, ggtext, relaimpo, arm, MuMIn, DHARMa, coxme, magrittr)
library(here)
## automatically detects the workspace after loading the package if Rstudio was opened using the script file (or with new R project)
## load last to avoid conflicts
here::here()
survival_data=read.table(here::here("data_survival.txt"),h=T, dec=".")
survival_data=read.table(here::here("Pe_survival_and_load/data_survival.txt"),h=T, dec=".")
head(survival_data)
plating_data=read.table(here::here("Pe_survival_and_load/data_plating.txt"),h=T, dec=".")
head(plating_data)
offspring_data=read.table(here::here("Pe_survival_and_load/data_offspring.txt"),h=T, dec=".")
head(offspring_data)
data_survival = survival_data |>
mutate(vial_change2 = str_replace_all(vial_change, "_", " "), nipagin2 = str_replace_all(nipagin, "_", " "), OD600_factor = str_replace_all(OD600_factor, "_", " ")) |>
mutate(pathogen=factor(pathogen, levels=c("sham", "Pe"))) |>
mutate(vial_change=factor(vial_change, levels=c("no_change", "daily_change"))) |>
mutate(nipagin=factor(nipagin, levels=c("without_nipagin", "with_nipagin"))) |>
mutate(OD600_factor=factor(OD600_factor, levels=c("sham", "OD = 0.0001", "OD = 0.01", "OD = 1", "OD = 50"))) |>
arrange(pathogen) |>
arrange(vial_change) |>
arrange(nipagin) |>
arrange(OD600_factor)
data_survival$OD600_ordered=ordered(data_survival$OD600)
data_survival$nipagin3 = str_remove(data_survival$nipagin2," nipagin")
data_survival_end=subset(data_survival, data_survival$time==183)
data_CFU = plating_data |>
mutate(vial_change2 = str_replace_all(vial_change, "_", " "), nipagin2 = str_replace_all(nipagin, "_", " "), OD600_factor = str_replace_all(OD600_factor, "_", " ")) |>
mutate(pathogen=factor(pathogen, levels=c("sham", "Pe"))) |>
mutate(vial_change=factor(vial_change, levels=c("no_change", "daily_change"))) |>
mutate(nipagin=factor(nipagin, levels=c("without_nipagin", "with_nipagin"))) |>
mutate(OD600_factor=factor(OD600_factor, levels=c("sham", "OD = 0.0001", "OD = 0.01", "OD = 1", "OD = 50"))) |>
arrange(pathogen) |>
arrange(vial_change) |>
arrange(nipagin) |>
arrange(OD600_factor)
data_offspring = offspring_data |>
mutate(nipagin2 = str_replace_all(nipagin, "_", " "), OD600_factor = str_replace_all(OD600_factor, "_", " ")) |>
mutate(nipagin=factor(nipagin, levels=c("without_nipagin", "with_nipagin"))) |>
mutate(OD600_factor=factor(OD600_factor, levels=c("sham", "OD = 0.0001", "OD = 0.01", "OD = 1", "OD = 50"))) |>
arrange(nipagin) |>
arrange(OD600_factor)
mycol=c("#808080","#f01010")
mycol2=c("#808080","#8a6767","#b35f5f","#d24040","#f01010")
data_CFU_trimmed = data_CFU %>% drop_na(CFU_per_fly) %>% group_by(nipagin, OD600_factor, vial_change, replicate) %>% top_n(1, time)
if (file.exists(here::here("mod_brms_cfu.Rdata"))) {
load(here::here("mod_brms_cfu.Rdata"))
} else {
mod_brms_cfu <- brm(
bf(log(CFU_per_fly+1) ~ OD600_factor*nipagin*vial_change),
data = data_CFU_trimmed,
chains = 4, iter = 10000, warmup = 5000, seed = 1312,
prior = c(
set_prior("normal(0,1.5)",class="Intercept"),
set_prior("normal(0,5)", class = "b")
),
backend = "cmdstanr"
)
save(
list = c("mod_brms_cfu"),
file = here::here("mod_brms_cfu.Rdata")
)
}
if (file.exists(here::here("Pe_survival_and_load/mod_brms_survival.Rdata"))) {
load(here::here("Pe_survival_and_load/mod_brms_survival.Rdata"))
} else {
mod_brms_survival <- brm(
bf(dead_flies | trials(total_flies) ~
nipagin * OD600_ordered * vial_change,
family = binomial()
),
data = data_survival_end,
prior=c(
set_prior("normal(0,1.5)",class="Intercept"),
set_prior("normal(0,1)",class="b")
),
chains = 4, iter = 10000, seed = 1312,
backend = "cmdstanr"
)
save(
list = c("mod_brms_survival"),
file = here::here("Pe_survival_and_load/mod_brms_survival.Rdata")
)
}
pp_check(mod_brms_survival)
pp_check(mod_brms_survival, "stat_2d")
fits_bayes_survival <- data_survival_end |>
dplyr::select(nipagin, nipagin3, vial_change, vial_change2, OD600_factor, OD600_ordered, total_flies) |>
mutate(total_flies=1) |>
distinct() |>
add_epred_draws(mod_brms_survival) |>
ungroup()
fits_bayes_survival$surv.epred=1-fits_bayes_survival$.epred
library(tidyverse)
# imaginons un cas simplifié: un % local, deux % non-locaux à combiner, un non-Ham
# quelque chose comme ça donc:
val_L = 0.5
val_NL1 = 0.01
val_NL2 = 0.05
val_none = 0.35
data=tibble(
group=c("H_local","H_nonlocal","H_nonlocal","none"),
value=c(val_L,val_NL1,val_NL2,val_none)
)
ggplot(data)+
geom_point(aes(group,value,colour=group),size=3)
test=function(val_L,val_NL1,val_NL2,val_none){
if(
sum((val_L>1) + (val_NL1>1) + (val_NL2>1) + (val_none>1) +
(val_L<0)  + (val_NL1<0) + (val_NL2<0) + (val_none<0) )
){
stop("on veut des proportions nom de nom")
}
m_estimate=NA
m_estimate_no_logit=NA
y_estimate=NA
for (i in 1:length(val_L)){
# comment moi j'avais calculé l'effet local v non-local moyen
m_estimate[i]=  qlogis(val_L[i])-mean(c(qlogis(val_NL1[i]),qlogis(val_NL2[i])))
# une version sans logit, pour voir c'est ça la raison
m_estimate_no_logit=  (val_L[i])-mean(c(val_NL1[i],val_NL2[i]))
y_estimate=  (val_L[i]-val_none[i])-mean(c((val_NL1[i]-val_none[i]),c(val_NL2[i]-val_none[i])))
}
tibble(m_estimate,y_estimate,m_estimate_no_logit)
}
mm=tibble(
val_L = rbeta(10000,5,5),
val_NL1 = rbeta(10000,1,9),
val_NL2 = rbeta(10000,2,8),
val_none = rbeta(10000,6,4)
) |>
mutate(
# comment moi j'avais calculé l'effet local v non-local moyen
m_estimate=  qlogis(val_L)-((qlogis(val_NL1)+qlogis(val_NL2))/2),
# une version sans logit, pour voir c'est ça la raison
m_estimate_no_logit=  val_L-((val_NL1+val_NL2)/2),
# ta version
y_estimate = (val_L-val_none)-(((val_NL1-val_none)+(val_NL2-val_none))/2)
)
ggplot(mm)+
geom_point(aes(m_estimate_no_logit,y_estimate))+
geom_hline(yintercept=0,col="red")+
geom_vline(xintercept=0,col="red")
ggplot(mm)+
geom_point(aes(m_estimate,y_estimate))+
geom_hline(yintercept=0,col="red")+
geom_vline(xintercept=0,col="red")
ggplot(mm)+
geom_point(aes(m_estimate,y_estimate,col=val_L))+
geom_hline(yintercept=0,col="red")+
geom_vline(xintercept=0,col="red")
data_CFU_trimmed = data_CFU %>% drop_na(CFU_per_fly) %>% group_by(nipagin, OD600_factor, vial_change, replicate) %>% top_n(1, time)
if (file.exists(here::here("Pe_survival_and_load/mod_brms_cfu.Rdata"))) {
load(here::here("Pe_survival_and_load/mod_brms_cfu.Rdata"))
} else {
mod_brms_cfu <- brm(
bf(log(CFU_per_fly+1) ~ OD600_factor*nipagin*vial_change),
data = data_CFU_trimmed,
chains = 4, iter = 10000, warmup = 5000, seed = 1312,
prior = c(
set_prior("normal(0,1.5)",class="Intercept"),
set_prior("normal(0,5)", class = "b")
),
backend = "cmdstanr"
)
save(
list = c("mod_brms_cfu"),
file = here::here("Pe_survival_and_load/mod_brms_cfu.Rdata")
)
}
pp_check(mod_brms_cfu)
pp_check(mod_brms_cfu, "stat_2d")
fits_bayCFU <- data_CFU_trimmed |>
dplyr::select(ID, nipagin, nipagin2, pathogen, OD600, OD600_factor, vial_change, replicate, time, CFU_per_fly) |>
distinct()  |>
add_epred_draws(mod_brms_cfu) |>
ungroup()
